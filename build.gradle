import org.gradle.api.internal.provider.MappingProvider
import com.vanniktech.maven.publish.SonatypeHost

buildscript {
    ext {
        springBootVersion = "3.3.5"
        springRestDocsVersion = "3.0.2"
        lombokVersion = '1.18.32'

        snippetsDir = layout.buildDirectory.dir("generated-snippets") as MappingProvider
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:1.1.0"
        classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
        classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.7.2"
        classpath "com.vanniktech:gradle-maven-publish-plugin:0.30.0"
    }
}

allprojects {
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.asciidoctor.jvm.convert"
    apply plugin: "com.google.osdetector"

    wrapper {
        gradleVersion = "8.10"
    }

    group = "io.github.syakuis"
    version = "1.0.0"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
    }

    configurations {
        implementation.exclude module: "spring-boot-starter-tomcat"
        asciidoctorExtensions
    }

    dependencies {
        if (osdetector.arch.equals("aarch_64")) {
            implementation "io.netty:netty-resolver-dns-native-macos:4.1.79.Final:osx-aarch_64"
        }

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

        implementation "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    }

    asciidoctor {
        inputs.dir snippetsDir
        configurations 'asciidoctorExtensions'
        dependsOn test
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        systemProperty 'spring.profiles.active', 'test'
    }

    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    javadoc {
        options {
            encoding 'UTF-8'
            version true
            author true
        }

        destinationDir = file("${buildDir}/docs/javadoc")
    }

    bootJar {
        enabled false
    }

    jar {
        enabled true
    }
}

apply plugin: "com.vanniktech.maven.publish"
apply plugin: "signing"

dependencies {
    asciidoctorExtensions "org.springframework.restdocs:spring-restdocs-asciidoctor:$springRestDocsVersion"

    api "org.springframework.restdocs:spring-restdocs-mockmvc:$springRestDocsVersion"
    implementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
}

ext.mavenCentralUsername = project.findProperty("mavenCentralUsername")?.toString()
ext.mavenCentralUsername = project.findProperty("mavenCentralPassword")?.toString()

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    coordinates(
        project.group,
        project.name,
        project.version
    )

    pom {
        name = project.name
        description = 'Spring REST Docs Easy extends Spring REST Docs to simplify API documentation. It combines test-driven documentation with internationalization support, enabling the creation of accurate and easily manageable API documentation.'
        url = 'https://github.com/syakuis/spring-restdocs-easy'

        licenses {
            license {
                name = 'The MIT License'
                url = 'https://opensource.org/licenses/MIT'
            }
        }
        developers {
            developer {
                id = 'syaku'
                name = 'seokkyun choi'
                email = 'syaku@naver.com'
            }
        }
        scm {
            connection = 'scm:git:git://github.com/syakuis/spring-restdocs-easy.git'
            developerConnection = 'scm:git:ssh://github.com/syakuis/spring-restdocs-easy.git'
            url = 'https://github.com/syakuis/spring-restdocs-easy'
        }
    }
}

signing {
    useInMemoryPgpKeys(
        project.findProperty('signing.keyId')?.toString(),
        project.findProperty('signing.signingInMemoryKey')?.toString(),
        project.findProperty('signing.password')?.toString()
    )

    sign publishing.publications
}