# ValidationMessages.properties
javax.validation.constraints.AssertFalse.descriptor     = must be false
javax.validation.constraints.AssertTrue.descriptor      = must be true
javax.validation.constraints.DecimalMax.descriptor      = must be less than ${inclusive == true ? 'or equal to ' : ''}${value}
javax.validation.constraints.DecimalMin.descriptor      = must be greater than ${inclusive == true ? 'or equal to ' : ''}${value}
javax.validation.constraints.Digits.descriptor          = numeric value out of bounds (<${integer} digits>.<${fraction} digits> expected)
javax.validation.constraints.Email.descriptor           = must be a well-formed email address
javax.validation.constraints.Future.descriptor          = must be a future date
javax.validation.constraints.FutureOrPresent.descriptor = must be a date in the present or in the future
javax.validation.constraints.Max.descriptor             = must be less than or equal to ${value}
javax.validation.constraints.Min.descriptor             = must be greater than or equal to ${value}
javax.validation.constraints.Negative.descriptor        = must be less than 0
javax.validation.constraints.NegativeOrZero.descriptor  = must be less than or equal to 0
javax.validation.constraints.NotBlank.descriptor        = must not be blank
javax.validation.constraints.NotEmpty.descriptor        = must not be empty
javax.validation.constraints.NotNull.descriptor         = must not be null
javax.validation.constraints.Null.descriptor            = must be null
javax.validation.constraints.Past.descriptor            = must be a past date
javax.validation.constraints.PastOrPresent.descriptor   = must be a date in the past or in the present
javax.validation.constraints.Pattern.descriptor         = must match "${regexp}"
javax.validation.constraints.Positive.descriptor        = must be greater than 0
javax.validation.constraints.PositiveOrZero.descriptor  = must be greater than or equal to 0
javax.validation.constraints.Size.descriptor            = size must be between ${min} and ${max}

org.hibernate.validator.constraints.CreditCardNumber.descriptor        = invalid credit card number
org.hibernate.validator.constraints.Currency.descriptor                = invalid currency (must be one of ${value})
org.hibernate.validator.constraints.EAN.descriptor                     = invalid ${type} barcode
org.hibernate.validator.constraints.Email.descriptor                   = not a well-formed email address
org.hibernate.validator.constraints.ISBN.descriptor                    = invalid ISBN
org.hibernate.validator.constraints.Length.descriptor                  = length must be between ${min} and ${max}
org.hibernate.validator.constraints.CodePointLength.descriptor         = length must be between ${min} and ${max}
org.hibernate.validator.constraints.LuhnCheck.descriptor               = the check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.descriptor              = the check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.descriptor              = the check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.descriptor                = the check digit for ${validatedValue} is invalid, {modType} checksum failed
org.hibernate.validator.constraints.Normalized.descriptor              = must be normalized
org.hibernate.validator.constraints.NotBlank.descriptor                = may not be empty
org.hibernate.validator.constraints.NotEmpty.descriptor                = may not be empty
org.hibernate.validator.constraints.ParametersScriptAssert.descriptor  = script expression "${script}" didn't evaluate to true
org.hibernate.validator.constraints.Range.descriptor                   = must be between ${min} and ${max}
org.hibernate.validator.constraints.ScriptAssert.descriptor            = script expression "${script}" didn't evaluate to true
org.hibernate.validator.constraints.UniqueElements.descriptor          = must only contain unique elements
org.hibernate.validator.constraints.URL.descriptor                     = must be a valid URL

org.hibernate.validator.constraints.br.CNPJ.descriptor                 = invalid Brazilian corporate taxpayer registry number (CNPJ)
org.hibernate.validator.constraints.br.CPF.descriptor                  = invalid Brazilian individual taxpayer registry number (CPF)
org.hibernate.validator.constraints.br.TituloEleitoral.descriptor      = invalid Brazilian Voter ID card number

org.hibernate.validator.constraints.pl.REGON.descriptor                = invalid Polish Taxpayer Identification Number (REGON)
org.hibernate.validator.constraints.pl.NIP.descriptor                  = invalid VAT Identification Number (NIP)
org.hibernate.validator.constraints.pl.PESEL.descriptor                = invalid Polish National Identification Number (PESEL)

org.hibernate.validator.constraints.ru.INN.descriptor                  = invalid Russian taxpayer identification number (INN)

org.hibernate.validator.constraints.time.DurationMax.descriptor        = must be shorter than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
org.hibernate.validator.constraints.time.DurationMin.descriptor        = must be longer than${inclusive == true ? ' or equal to' : ''}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 milli' : ' ' += millis += ' millis'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
